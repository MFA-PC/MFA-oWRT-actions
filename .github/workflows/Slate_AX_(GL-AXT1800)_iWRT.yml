#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#
# GL.iNet GL-AXT1800 (Slate AX)
# SoC: Qualcommax ipq60xx
#  CPU: IPQ6000 1.2GHz Quad-core Processor
# FLASH: NAND Flash 128MB
# RAM: DDR3L 512MB

name: AXT-1800-iWRT

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH for Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt.git
  #REPO_BRANCH: kernel-6.12
  #REPO_BRANCH: main
  #REPO_BRANCH: openwrt-24.10
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ./config/iWRT_NanoPi-R5S.config
  DIY_P1_SH: ./sh/WRT-part1.sh
  DIY_P2_SH: ./sh/WRT-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Europe/Moscow

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions: 
      contents: write
      actions: write

    steps:
    - name: Free up disk space!!!
      run: |
        echo ">>> Освобождение диска"
        df -h
        sudo rm -rf /usr/share/dotnet \
                    /usr/local/lib/android \
                    /opt/ghc \
                    /opt/hostedtoolcache \
                    /opt/az \
                    /opt/microsoft \
                    "$AGENT_TOOLSDIRECTORY"
        sudo apt-get purge -y "azure*" "dotnet*" "ghc*" "llvm*" "mono*" "android*"
        sudo apt-get autoremove -y
        sudo apt-get clean
        df -h
    
    - name: Check disk space
      run: df -h

    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://raw.githubusercontent.com/Gzxhwq/OpenWrt-Actions/main/depends-ubuntu-2204)
        sudo -E apt-get -qq install build-essential clang flex bison g++ gawk \
        gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
        python3-setuptools rsync swig unzip zlib1g-dev file wget \
        llvm python3-pyelftools libpython3-dev aria2 jq qemu-utils ccache rename \
        libelf-dev device-tree-compiler libgmp3-dev libmpc-dev libfuse-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Cloning source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --branch $REPO_BRANCH $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Get Latest Kernel Hash
      id: get_hash
      run: |
        KERNEL_LIST=$(curl -s https://immortalwrt.kyarucloud.moe/snapshots/targets/qualcommax/ipq60xx/kmods/ | grep -oE '6\.[0-9]+\.[0-9]+-[0-9]+-[a-f0-9]+')
        echo "$KERNEL_LIST" | while read -r line; do
            version=$(echo "$line" | cut -d'-' -f1)
            major=$(echo "$version" | cut -d'.' -f1)
            minor=$(echo "$version" | cut -d'.' -f2)
            patch=$(echo "$version" | cut -d'.' -f3)
            printf "%03d%03d%03d %s\n" "$major" "$minor" "$patch" "$line"
        done | sort -r | head -n1 | cut -d' ' -f2 | cut -d'-' -f3
        LATEST_HASH=$(echo "$KERNEL_LIST" | while read -r line; do
            version=$(echo "$line" | cut -d'-' -f1)
            major=$(echo "$version" | cut -d'.' -f1)
            minor=$(echo "$version" | cut -d'.' -f2)
            patch=$(echo "$version" | cut -d'.' -f3)
            printf "%03d%03d%03d %s\n" "$major" "$minor" "$patch" "$line"
        done | sort -r | head -n1 | cut -d' ' -f2 | cut -d'-' -f3)
        echo "LATEST_HASH=${LATEST_HASH}" >> $GITHUB_ENV

    - name: Modify kernel-defaults.mk
      run: |
        cd openwrt
        sed -i "s/\$(MKHASH) md5/echo \"${LATEST_HASH}\"/g" include/kernel-defaults.mk
    - name: Debug Hash
      run: echo "Latest hash ${LATEST_HASH}"

    - name: Loading custom sources
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: update source
      run: cd openwrt && ./scripts/feeds update -a
      #run: |
      #  cd openwrt
      #  sed -i 's|immortalwrt/luci.git|immortalwrt/luci.git^38f7d5cffeb28a49524cb5e0627eec5f0d5e053d|' feeds.conf.default
      #  ./scripts/feeds update -a
      #  for pkg in adguardhome autocore automount base-files chinadns-ng cpufreq curl firewall4 fstools \
      #              luci-app-firewall luci-app-homeproxy luci-app-opkg luci-base luci-mod-network \
      #              luci-mod-status luci-mod-system opkg ppp sing-box wifi-scripts wireless-regdb; do
      #    ./scripts/feeds list -r kiddin9 | grep -E "$pkg" | xargs ./scripts/feeds uninstall
      #  done

    - name: installation source
      run: cd openwrt && ./scripts/feeds install -a

    - name: Loading Custom Configurations
      run: |
        [ -e files ] && mv ./files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        # Удаляем ненужные строки
        sed -i '/CONFIG_TARGET/d' openwrt/.config
        sed -i '/fdisk/d' openwrt/.config
        sed -i '/kmod-r8125/d' openwrt/.config
        sed -i '/kmod-r8169/d' openwrt/.config
        sed -i '/partx-utils/d' openwrt/.config
        sed -i '/fitblk/d' openwrt/.config
        sed -i '/kmod-crypto-hw-safexcel/d' openwrt/.config
        sed -i '/mt76/d' openwrt/.config
        # Добавляем необходимые строки
        echo 'CONFIG_TARGET_qualcommax=y' >> openwrt/.config
        echo 'CONFIG_TARGET_qualcommax_ipq60xx=y' >> openwrt/.config
        echo 'CONFIG_TARGET_qualcommax_ipq60xx_DEVICE_glinet_gl-axt1800=y' >> openwrt/.config
        echo 'CONFIG_TARGET_PROFILE="DEVICE_glinet_gl-axt1800"' >> openwrt/.config
        echo 'CONFIG_TARGET_ARCH_PACKAGES="aarch64_cortex-a53"' >> openwrt/.config
        #echo 'CONFIG_TARGET_ROOTFS_PARTSIZE=512' >> openwrt/.config
        echo 'CONFIG_ALL_NONSHARED=y' >> openwrt/.config
        echo 'CONFIG_AUTOREMOVE=y' >> openwrt/.config
        echo 'CONFIG_DEVEL=y' >> openwrt/.config
        echo 'CONFIG_DWARVES=y' >> openwrt/.config
        echo 'CONFIG_IB=y' >> openwrt/.config
        echo 'CONFIG_JSON_CYCLONEDX_SBOM=y' >> openwrt/.config
        echo 'CONFIG_KERNEL_ARM_PMU=y' >> openwrt/.config
        echo 'CONFIG_KERNEL_ARM_PMUV3=y' >> openwrt/.config
        echo 'CONFIG_KERNEL_BPF_EVENTS=y' >> openwrt/.config
        echo 'CONFIG_KERNEL_BPF_STREAM_PARSER=y' >> openwrt/.config
        echo 'CONFIG_KERNEL_BUILD_DOMAIN="buildbot.infra.immortalwrt.org"' >> openwrt/.config
        echo 'CONFIG_KERNEL_BUILD_USER="buildbot"' >> openwrt/.config
        echo 'CONFIG_KERNEL_FTRACE=y' >> openwrt/.config
        echo 'CONFIG_KERNEL_KPROBE_EVENTS=y' >> openwrt/.config
        echo 'CONFIG_KERNEL_KPROBES=y' >> openwrt/.config
        echo 'CONFIG_KERNEL_MODULE_ALLOW_BTF_MISMATCH=y' >> openwrt/.config
        echo 'CONFIG_KERNEL_NETKIT=y' >> openwrt/.config
        echo 'CONFIG_KERNEL_PERF_EVENTS=y' >> openwrt/.config
        echo 'CONFIG_KERNEL_XDP_SOCKETS=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_apk-openssl=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_ath11k-firmware-ipq6018=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_ath11k-firmware-new-ipq6018=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_automount=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_base-files=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_bridger=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_ca-bundle=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_cpufreq=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_dnsmasq-full=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_dosfstools=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_dropbear=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_eip197-mini-firmware=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_fancontrol=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_firewall4=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_fitblk=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_fstools=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_ipq-wifi-glinet_gl-axt1800=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-ath11k-ahb=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-ath11k=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-crypto-gcm=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-crypto-hw-ipq60xx=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-crypto-hw-safexcel=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-gpio-button-hotplug=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-hwmon-pwmfan=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-inet-diag=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-ipt-conntrack=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-leds-gpio=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-nft-fullcone=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-nft-offload=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-nft-set=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-qca-nss-cfi-cryptoapi=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-qca-nss-crypto=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-qca-nss-dp=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-qca-nss-drv-bridge-mgr=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-qca-nss-drv-pppoe=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-qca-nss-drv=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-qca-nss-ecm=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-qrtr-mhi=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-qrtr-smd=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-qrtr-tun=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-usb-dwc3-qcom=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-usb-dwc3=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-usb3=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kmod-xdp-sockets-diag=m' >> openwrt/.config
        echo 'CONFIG_PACKAGE_kselftests-bpf=m' >> openwrt/.config
        echo 'CONFIG_PACKAGE_libbfd=m' >> openwrt/.config
        echo 'CONFIG_PACKAGE_libbz2=m' >> openwrt/.config
        echo 'CONFIG_PACKAGE_libc=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_libctf=m' >> openwrt/.config
        echo 'CONFIG_PACKAGE_libdw=m' >> openwrt/.config
        echo 'CONFIG_PACKAGE_libgcc=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_libiwinfo=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_libopcodes=m' >> openwrt/.config
        echo 'CONFIG_PACKAGE_libtraceevent=m' >> openwrt/.config
        echo 'CONFIG_PACKAGE_libustream-openssl=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_logd=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_losetup=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_luci-app-fancontrol=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_luci-i18n-fancontrol-ru=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_luci-i18n-wifischedule-ru=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_mailsend=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_mtd=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_musl-fts=m' >> openwrt/.config
        echo 'CONFIG_PACKAGE_netifd=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_nftables=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_nss-eip-firmware=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_nss-firmware-default=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_nss-firmware-ipq6018=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_objdump=m' >> openwrt/.config
        echo 'CONFIG_PACKAGE_odhcp6c=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_odhcpd-ipv6only=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_perf=m' >> openwrt/.config
        echo 'CONFIG_PACKAGE_ppp-mod-pppoe=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_ppp=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_procd-ujail=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_uboot-envtools=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_uci=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_uclient-fetch=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_urandom-seed=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_urngd=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_wpad-basic-openssl=y' >> openwrt/.config
        echo 'CONFIG_PACKAGE_wpad-openssl=y' >> openwrt/.config
        echo 'CONFIG_SDK_LLVM_BPF=y' >> openwrt/.config
        echo # 'CONFIG_KERNEL_DEBUG_INFO_REDUCED is not set' >> openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        make defconfig

    - name: SSH Connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download Software Packages
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) Thread compilation"
        echo "y" | make -j$(expr $(nproc) + 1) || echo "y" | make -j1 V=s
        echo "compile-status=success" >> $GITHUB_ENV
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        cat $GITHUB_ENV
        echo "compile=success" >> $GITHUB_OUTPUT
        if [ -s DEVICE_NAME ]; then
          echo "device-name=$(cat DEVICE_NAME)" >> $GITHUB_OUTPUT
        fi
        echo "file-date=$(date +"%Y%m%d%H%M")" >> $GITHUB_OUTPUT

    - name: Inspection of space utilization
      if: (!cancelled())
      run: df -hT

    - name: Cleanup unnecessary build artifacts!!!
      run: |
        echo ">>> Очистка build_dir и staging_dir"
        rm -rf openwrt/build_dir openwrt/staging_dir openwrt/tmp
        df -h

    - name: Uploading the bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.compile == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: iWRT_axt1800-${{ steps.compile.outputs.device-name }}_${{ steps.compile.outputs.file-date }}
        path: openwrt/bin


    - name: Organize documents
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_ENV
        echo "organize=success" >> $GITHUB_OUTPUT

    - name: Uploading the firmware catalog
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.organize == 'success' && !cancelled()
      with:
        name: iWRT_axt1800-firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate Publishing Tags
      id: tag
      if: steps.compile.outputs.compile == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "Generate Publishing Tags..."
        echo "release_tag=Slate_GL-AXT1800" >> $GITHUB_ENV
        echo "release_tag=Slate_GL-AXT1800" >> $GITHUB_OUTPUT

        touch release.txt
        echo "tag=success" >> $GITHUB_ENV
        echo "tag=success" >> $GITHUB_OUTPUT

    - name: Upload Firmware to Release
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.release_tag && steps.compile.outputs.compile == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
        prerelease: true
        draft: false

    - name: Delete the workflow run
      uses: Mattraks/delete-workflow-runs@v2.0.6
      with:
        retain_days: 4
        keep_minimum_runs: 3

    - name: Delete old version
      uses: dev-drprasad/delete-older-releases@v0.3.4
      if: steps.tag.outputs.release_tag && env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
