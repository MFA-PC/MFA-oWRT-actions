name: Unified iWRT

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      target:
        description: 'Choose a target to build'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - slateax
          - nanopi-r5s
          - ax59u
          - brume2
      ssh:
        description: 'SSH for Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt.git
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ./config/WRT.config
  DIY_P1_SH: ./sh/WRT-part1.sh
  DIY_P2_SH: ./sh/WRT-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: false
  TZ: Europe/Moscow

jobs:
  # This setup job determines which matrix configurations to run
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          # The full matrix definition as a multi-line shell variable.
          MATRIX_JSON='
          {
            "include": [
              {
                "target": "slateax",
                "name": "GL.iNet Slate AX (AXT1800)",
                "arch": "aarch64_cortex-a53",
                "kernel_path": "qualcommax/ipq60xx",
                "release_tag": "Slate_GL-AXT1800",
                "device_config": "sed -i \"/fdisk/d\" ./.config; sed -i \"/partx-utils/d\" ./.config; sed -i \"/fitblk/d\" ./.config; sed -i \"/kmod-crypto-hw-safexcel/d\" ./.config; echo \"CONFIG_TARGET_qualcommax=y\" >> ./.config; echo \"CONFIG_TARGET_qualcommax_ipq60xx=y\" >> ./.config; echo \"CONFIG_TARGET_qualcommax_ipq60xx_DEVICE_glinet_gl-axt1800=y\" >> ./.config; echo \"CONFIG_TARGET_PROFILE=\\\"DEVICE_glinet_gl-axt1800\\\"\" >> ./.config; echo \"CONFIG_TARGET_ARCH_PACKAGES=\\\"aarch64_cortex-a53\\\"\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-qcom-qmi-helpers=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-cfg80211=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-mac80211=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-qca-ssdk=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-usb-dwc3-qcom=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-ath=y\" >> ./.config; echo \"CONFIG_PACKAGE_ath11k-firmware-ipq6018=y\" >> ./.config; echo \"CONFIG_PACKAGE_ath11k-firmware-new-ipq6018=y\" >> ./.config; echo \"CONFIG_PACKAGE_dosfstools=y\" >> ./.config; echo \"CONFIG_PACKAGE_eip197-mini-firmware=y\" >> ./.config; echo \"CONFIG_PACKAGE_fancontrol=y\" >> ./.config; echo \"CONFIG_PACKAGE_ipq-wifi-glinet_gl-axt1800=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-ath11k-ahb=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-ath11k=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-hwmon-pwmfan=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-nft-fullcone=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-qca-nss-dp=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-qrtr=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-qrtr-mhi=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-qrtr-smd=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-qrtr-tun=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-usb-dwc3-qcom=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-usb-dwc3=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-usb3=y\" >> ./.config; echo \"CONFIG_PACKAGE_libiwinfo=y\" >> ./.config; echo \"CONFIG_PACKAGE_losetup=y\" >> ./.config; echo \"CONFIG_PACKAGE_luci-app-fancontrol=y\" >> ./.config; echo \"CONFIG_PACKAGE_luci-i18n-fancontrol-ru=y\" >> ./.config; echo \"CONFIG_PACKAGE_luci-i18n-wifischedule-ru=y\" >> ./.config; echo \"CONFIG_PACKAGE_nss-eip-firmware=y\" >> ./.config; echo \"CONFIG_PACKAGE_nss-firmware-default=y\" >> ./.config; echo \"CONFIG_PACKAGE_nss-firmware-ipq6018=y\" >> ./.config; echo \"CONFIG_PACKAGE_wpad-basic-openssl=y\" >> ./.config; echo \"CONFIG_PACKAGE_wpad-openssl=y\" >> ./.config"
              },
              {
                "target": "nanopi-r5s",
                "name": "FriendlyARM NanoPi R5S",
                "arch": "aarch64_generic",
                "kernel_path": "rockchip/armv8",
                "release_tag": "iWRT_NanoPi-R5S",
                "device_config": "echo \"CONFIG_TARGET_rockchip=y\" >> ./.config; echo \"CONFIG_TARGET_rockchip_armv8=y\" >> ./.config; echo \"CONFIG_TARGET_rockchip_armv8_DEVICE_friendlyarm_nanopi-r5s=y\" >> ./.config; echo \"CONFIG_TARGET_ARCH_PACKAGES=\\\"aarch64_generic\\\"\" >> ./.config; echo \"CONFIG_TARGET_ROOTFS_PARTSIZE=512\" >> ./.config; echo \"CONFIG_TARGET_IMAGES_GZIP=y\" >> ./.config; echo \"CONFIG_TARGET_ROOTFS_SQUASHFS=y\" >> ./.config; echo \"# CONFIG_TARGET_ROOTFS_EXT4FS is not set\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-r8125=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-r8169=n\" >> ./.config; echo \"CONFIG_PACKAGE_resize2fs=y\" >> ./.config; echo \"CONFIG_PACKAGE_losetup=y\" >> ./.config"
              },
              {
                "target": "ax59u",
                "name": "ASUS RT-AX59U",
                "arch": "aarch64_cortex-a53",
                "kernel_path": "mediatek/filogic",
                "release_tag": "iWRT_AX59U",
                "device_config": "sed -i \"/fdisk/d\" ./.config; sed -i \"/partx-utils/d\" ./.config; sed -i \"/fitblk/d\" ./.config; sed -i \"/kmod-crypto-hw-safexcel/d\" ./.config; echo \"CONFIG_TARGET_mediatek=y\" >> ./.config; echo \"CONFIG_TARGET_mediatek_filogic=y\" >> ./.config; echo \"CONFIG_TARGET_mediatek_filogic_DEVICE_asus_rt-ax59u=y\" >> ./.config; echo \"CONFIG_TARGET_ARCH_PACKAGES=\\\"aarch64_cortex-a53\\\"\" >> ./.config; echo \"CONFIG_PACKAGE_fitblk=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-crypto-hw-safexcel=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-usb3=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-mt7915e=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-mt7986-firmware=y\" >> ./.config; echo \"CONFIG_PACKAGE_mt7986-wo-firmware=y\" >> ./.config; echo \"CONFIG_PACKAGE_wifischedule=y\" >> ./.config; echo \"CONFIG_PACKAGE_luci-app-wifischedule=y\" >> ./.config; echo \"CONFIG_PACKAGE_luci-i18n-wifischedule-ru=y\" >> ./.config; echo \"CONFIG_PACKAGE_facinstall=y\" >> ./.config"
              },
              {
                "target": "brume2",
                "name": "GL.iNet Brume 2 (MT2500)",
                "arch": "aarch64_cortex-a53",
                "kernel_path": "mediatek/filogic",
                "release_tag": "iWRT_Brume2",
                "device_config": "sed -i \"/fdisk/d\" ./.config; sed -i \"/partx-utils/d\" ./.config; sed -i \"/fitblk/d\" ./.config; sed -i \"/kmod-crypto-hw-safexcel/d\" ./.config; echo \"CONFIG_TARGET_mediatek=y\" >> ./.config; echo \"CONFIG_TARGET_mediatek_filogic=y\" >> ./.config; echo \"CONFIG_TARGET_mediatek_filogic_DEVICE_glinet_gl-mt2500=y\" >> ./.config; echo \"CONFIG_TARGET_ARCH_PACKAGES=\\\"aarch64_cortex-a53\\\"\" >> ./.config; echo \"CONFIG_PACKAGE_fitblk=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-crypto-hw-safexcel=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-usb3=y\" >> ./.config; echo \"CONFIG_PACKAGE_eip197-mini-firmware=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-mt7981-firmware=y\" >> ./.config; echo \"CONFIG_PACKAGE_mt7981-wo-firmware=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-mt76=m\" >> ./.config"
              }
            ]
          }
          '
          
          if [ "${{ github.event.inputs.target }}" == "all" ]; then
            echo "matrix=$(echo "$MATRIX_JSON" | jq -c .)" >> $GITHUB_OUTPUT
          else
            FILTERED_MATRIX=$(echo "$MATRIX_JSON" | jq -c --arg TARGET "${{ github.event.inputs.target }}" '{include: [.include[] | select(.target == $TARGET)]}')
            echo "matrix=$FILTERED_MATRIX" >> $GITHUB_OUTPUT
          fi

  build:
    needs: setup
    if: ${{ needs.setup.outputs.matrix != '' && fromJson(needs.setup.outputs.matrix).include[0] != null }}
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      actions: write

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}

    name: Build for ${{ matrix.name }}

    steps:
    - name: Free up disk space
      run: |
        echo ">>> Освобождение диска"
        df -h
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache /opt/az /opt/microsoft "$AGENT_TOOLSDIRECTORY"
        sudo apt-get purge -y "azure*" "dotnet*" "ghc*" "llvm*" "mono*" "android*"
        sudo apt-get autoremove -y
        sudo apt-get clean
        df -h

    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://raw.githubusercontent.com/Gzxhwq/OpenWrt-Actions/main/depends-ubuntu-2204) build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-setuptools rsync swig unzip zlib1g-dev file wget llvm python3-pyelftools libpython3-dev aria2 jq qemu-utils ccache rename libelf-dev device-tree-compiler libgmp3-dev libmpc-dev libfuse-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Cloning source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --branch $REPO_BRANCH $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    # ==================== CACHING START ====================
    - name: Cache DL directory
      uses: actions/cache@v4
      id: cache-dl
      with:
        path: openwrt/dl
        key: ${{ runner.os }}-dl-${{ env.REPO_BRANCH }}-${{ hashFiles('**/feeds.conf.default') }}
        restore-keys: |
          ${{ runner.os }}-dl-${{ env.REPO_BRANCH }}-
    
    # We need to run this step to get .config for the build cache key
    - name: Prepare configuration
      run: |
        cd openwrt
        [ -e $GITHUB_WORKSPACE/$FEEDS_CONF ] && mv $GITHUB_WORKSPACE/$FEEDS_CONF ./feeds.conf.default
        chmod +x $GITHUB_WORKSPACE/$DIY_P1_SH
        $GITHUB_WORKSPACE/$DIY_P1_SH
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        [ -e $GITHUB_WORKSPACE/$CONFIG_FILE ] && mv $GITHUB_WORKSPACE/$CONFIG_FILE ./.config
        [ -e $GITHUB_WORKSPACE/files ] && mv $GITHUB_WORKSPACE/files ./files
        echo "--- Injecting config for ${{ matrix.name }} ---"
        eval "${{ matrix.device_config }}"
        echo "---------------------------------------------"
        chmod +x $GITHUB_WORKSPACE/$DIY_P2_SH
        $GITHUB_WORKSPACE/$DIY_P2_SH
        make defconfig

    - name: Cache Build tools and results
      uses: actions/cache@v4
      with:
        path: |
          openwrt/staging_dir
          openwrt/build_dir
        key: ${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('openwrt/.config') }}-${{ hashFiles('openwrt/feeds.conf.default') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.arch }}-build-
    # ===================== CACHING END =====================

    - name: Download Software Packages
      id: package
      # Run download only if the 'dl' cache was not restored
      if: steps.cache-dl.outputs.cache-hit != 'true'
      run: |
        cd openwrt
        make download -j$(nproc)
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) Thread compilation"
        make -j$(expr $(nproc) + 1) || make -j1 V=s
        echo "compile_status=success" >> $GITHUB_ENV
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "compile=success" >> $GITHUB_OUTPUT
        if [ -s DEVICE_NAME ]; then
          echo "device-name=$(cat DEVICE_NAME)" >> $GITHUB_OUTPUT
        fi
        echo "file-date=$(date +"%Y%m%d%H%M")" >> $GITHUB_OUTPUT
        
    # The rest of the workflow remains the same...
    - name: Inspection of space utilization
      if: (!cancelled())
      run: df -hT

    - name: Uploading the bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.compile == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: ${{ matrix.target }}_iWRT_bin${{ steps.compile.outputs.device-name }}_${{ steps.compile.outputs.file-date }}
        path: openwrt/bin

    - name: Delete the workflow run
      uses: Mattraks/delete-workflow-runs@v2.0.6
      if: success() || failure()
      with:
        retain_days: 4
        keep_minimum_runs: 3
