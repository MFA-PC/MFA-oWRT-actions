#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: oWRT_NanoPi-R5S

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH for Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://git.openwrt.org/openwrt/openwrt.git
  REPO_BRANCH: main
  #REPO_BRANCH: openwrt-24.10
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ./config/oWRT_NanoPi-R5S.config
  DIY_P1_SH: ./sh/part1-oWRT.sh
  DIY_P2_SH: ./sh/part2-oWRT.sh
  DIY_P3_SH: ./sh/part3-oWRT.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Europe/Moscow

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions: 
      contents: write
      actions: write

    steps:
    - name: Check disk space
      run: df -h

    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://raw.githubusercontent.com/Gzxhwq/OpenWrt-Actions/main/depends-ubuntu-2204)
        sudo -E apt-get -qq install build-essential clang flex bison g++ gawk \
        gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
        python3-setuptools rsync swig unzip zlib1g-dev file wget \
        llvm python3-pyelftools libpython3-dev aria2 jq qemu-utils ccache rename \
        libelf-dev device-tree-compiler libgmp3-dev libmpc-dev libfuse-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Cloning source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --branch $REPO_BRANCH $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Get Latest Kernel Hash
      id: get_hash
      run: |
        KERNEL_LIST=$(curl -s https://downloads.openwrt.org/snapshots/targets/rockchip/armv8/kmods/ | grep -oE '6\.[0-9]+\.[0-9]+-[0-9]+-[a-f0-9]+')
        echo "$KERNEL_LIST" | while read -r line; do
            version=$(echo "$line" | cut -d'-' -f1)
            major=$(echo "$version" | cut -d'.' -f1)
            minor=$(echo "$version" | cut -d'.' -f2)
            patch=$(echo "$version" | cut -d'.' -f3)
            printf "%03d%03d%03d %s\n" "$major" "$minor" "$patch" "$line"
        done | sort -r | head -n1 | cut -d' ' -f2 | cut -d'-' -f3

        LATEST_HASH=$(echo "$KERNEL_LIST" | while read -r line; do
            version=$(echo "$line" | cut -d'-' -f1)
            major=$(echo "$version" | cut -d'.' -f1)
            minor=$(echo "$version" | cut -d'.' -f2)
            patch=$(echo "$version" | cut -d'.' -f3)
            printf "%03d%03d%03d %s\n" "$major" "$minor" "$patch" "$line"
        done | sort -r | head -n1 | cut -d' ' -f2 | cut -d'-' -f3)

        echo "LATEST_HASH=${LATEST_HASH}" >> $GITHUB_ENV

    - name: Modify kernel-defaults.mk
      run: |
        cd openwrt
        sed -i "s/\$(MKHASH) md5/echo \"${LATEST_HASH}\"/g" include/kernel-defaults.mk

    - name: Debug Hash
      run: echo "Latest hash ${LATEST_HASH}"

    - name: Loading custom sources
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: update source
      run: cd openwrt && ./scripts/feeds update -a

    - name: installation source
      run: cd openwrt && ./scripts/feeds install -a

    - name: Loading Custom Configurations
      run: |
        [ -e files ] && mv ./files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        # Заменяем CONFIG_PACKAGE_kmod-r8125=y на CONFIG_PACKAGE_kmod-r8125-rss=y для Openwrt
        sed -i 's/^CONFIG_PACKAGE_kmod-r8125=y$/CONFIG_PACKAGE_kmod-r8125-rss=y/' .config
        make defconfig

    - name: SSH Connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download Software Packages
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) Thread compilation"
        echo "y" | make -j$(expr $(nproc) + 1) || echo "y" | make -j1 V=s
        echo "compile-status=success" >> $GITHUB_ENV
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        cat $GITHUB_ENV
        echo "compile=success" >> $GITHUB_OUTPUT
        if [ -s DEVICE_NAME ]; then
          echo "device-name=$(cat DEVICE_NAME)" >> $GITHUB_OUTPUT
        fi
        echo "file-date=$(date +"%Y%m%d%H%M")" >> $GITHUB_OUTPUT

    - name: Inspection of space utilization
      if: (!cancelled())
      run: df -hT

    - name: Uploading the bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.compile == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: oWrt_bin_${{ steps.compile.outputs.device-name }}_${{ steps.compile.outputs.file-date }}
        path: openwrt/bin


    - name: Organize documents
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_ENV
        echo "organize=success" >> $GITHUB_OUTPUT

    - name: Uploading the firmware catalog
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.organize == 'success' && !cancelled()
      with:
        name: oWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate Publishing Tags
      id: tag
      if: steps.compile.outputs.compile == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "Generate Publishing Tags..."
        echo "release_tag=Slate_GL-AXT1800" >> $GITHUB_ENV
        echo "release_tag=Slate_GL-AXT1800" >> $GITHUB_OUTPUT

        touch release.txt
        echo "tag=success" >> $GITHUB_ENV
        echo "tag=success" >> $GITHUB_OUTPUT

    - name: Upload Firmware to Release
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.release_tag && steps.compile.outputs.compile == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
        prerelease: true
        draft: false

    - name: Delete the workflow run
      uses: Mattraks/delete-workflow-runs@v2.0.6
      with:
        retain_days: 4
        keep_minimum_runs: 3

    - name: Delete old version
      uses: dev-drprasad/delete-older-releases@v0.3.4
      if: steps.tag.outputs.release_tag && env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
