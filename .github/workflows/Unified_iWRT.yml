#
# Unified Build Workflow for iWRT
#

name: Unified iWRT

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      target:
        description: 'Choose a target to build'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - slateax
          - nanopi-r5s
          - ax59u
          - brume2
      ssh:
        description: 'SSH for Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt.git
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ./config/WRT.config
  DIY_P1_SH: ./sh/WRT-part1.sh
  DIY_P2_SH: ./sh/WRT-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: false
  TZ: Europe/Moscow

jobs:
  # This setup job determines which matrix configurations to run
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          # The full matrix definition as a multi-line shell variable.
          # Note that device_config is now properly quoted to be a single string argument in shell.
          MATRIX_JSON='
          {
            "include": [
              {
                "target": "slateax",
                "name": "GL.iNet Slate AX (AXT1800)",
                "kernel_path": "qualcommax/ipq60xx",
                "release_tag": "Slate_GL-AXT1800",
                "device_config": "sed -i \"/fdisk/d\" ./.config; sed -i \"/partx-utils/d\" ./.config; sed -i \"/fitblk/d\" ./.config; sed -i \"/kmod-crypto-hw-safexcel/d\" ./.config; echo \"CONFIG_TARGET_qualcommax=y\" >> ./.config; echo \"CONFIG_TARGET_qualcommax_ipq60xx=y\" >> ./.config; echo \"CONFIG_TARGET_qualcommax_ipq60xx_DEVICE_glinet_gl-axt1800=y\" >> ./.config; echo \"CONFIG_TARGET_PROFILE=\\\"DEVICE_glinet_gl-axt1800\\\"\" >> ./.config; echo \"CONFIG_TARGET_ARCH_PACKAGES=\\\"aarch64_cortex-a53\\\"\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-qcom-qmi-helpers=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-cfg80211=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-mac80211=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-qca-ssdk=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-usb-dwc3-qcom=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-ath=y\" >> ./.config; echo \"CONFIG_PACKAGE_ath11k-firmware-ipq6018=y\" >> ./.config; echo \"CONFIG_PACKAGE_ath11k-firmware-new-ipq6018=y\" >> ./.config; echo \"CONFIG_PACKAGE_dosfstools=y\" >> ./.config; echo \"CONFIG_PACKAGE_eip197-mini-firmware=y\" >> ./.config; echo \"CONFIG_PACKAGE_fancontrol=y\" >> ./.config; echo \"CONFIG_PACKAGE_ipq-wifi-glinet_gl-axt1800=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-ath11k-ahb=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-ath11k=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-hwmon-pwmfan=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-nft-fullcone=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-qca-nss-dp=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-qrtr=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-qrtr-mhi=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-qrtr-smd=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-qrtr-tun=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-usb-dwc3-qcom=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-usb-dwc3=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-usb3=y\" >> ./.config; echo \"CONFIG_PACKAGE_libiwinfo=y\" >> ./.config; echo \"CONFIG_PACKAGE_losetup=y\" >> ./.config; echo \"CONFIG_PACKAGE_luci-app-fancontrol=y\" >> ./.config; echo \"CONFIG_PACKAGE_luci-i18n-fancontrol-ru=y\" >> ./.config; echo \"CONFIG_PACKAGE_luci-i18n-wifischedule-ru=y\" >> ./.config; echo \"CONFIG_PACKAGE_nss-eip-firmware=y\" >> ./.config; echo \"CONFIG_PACKAGE_nss-firmware-default=y\" >> ./.config; echo \"CONFIG_PACKAGE_nss-firmware-ipq6018=y\" >> ./.config; echo \"CONFIG_PACKAGE_wpad-basic-openssl=y\" >> ./.config; echo \"CONFIG_PACKAGE_wpad-openssl=y\" >> ./.config"
              },
              {
                "target": "nanopi-r5s",
                "name": "FriendlyARM NanoPi R5S",
                "kernel_path": "rockchip/armv8",
                "release_tag": "iWRT_NanoPi-R5S",
                "device_config": "echo \"CONFIG_TARGET_rockchip=y\" >> ./.config; echo \"CONFIG_TARGET_rockchip_armv8=y\" >> ./.config; echo \"CONFIG_TARGET_rockchip_armv8_DEVICE_friendlyarm_nanopi-r5s=y\" >> ./.config; echo \"CONFIG_TARGET_ARCH_PACKAGES=\\\"aarch64_generic\\\"\" >> ./.config; echo \"CONFIG_TARGET_ROOTFS_PARTSIZE=512\" >> ./.config; echo \"CONFIG_TARGET_IMAGES_GZIP=y\" >> ./.config; echo \"CONFIG_TARGET_ROOTFS_SQUASHFS=y\" >> ./.config; echo \"# CONFIG_TARGET_ROOTFS_EXT4FS is not set\" >> ./.config; echo \"# CONFIG_TARGET_ROOTFS_JFFS2 is not set\" >> ./.config; echo \"# CONFIG_TARGET_ROOTFS_UBIFS is not set\" >> ./.config; echo \"# CONFIG_TARGET_ROOTFS_TARGZ is not set\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-r8125=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-r8169=n\" >> ./.config; echo \"CONFIG_PACKAGE_resize2fs=y\" >> ./.config; echo \"CONFIG_PACKAGE_losetup=y\" >> ./.config"
              },
              {
                "target": "ax59u",
                "name": "ASUS RT-AX59U",
                "kernel_path": "mediatek/filogic",
                "release_tag": "iWRT_AX59U",
                "device_config": "sed -i \"/fdisk/d\" ./.config; sed -i \"/partx-utils/d\" ./.config; sed -i \"/fitblk/d\" ./.config; sed -i \"/kmod-crypto-hw-safexcel/d\" ./.config; echo \"CONFIG_TARGET_mediatek=y\" >> ./.config; echo \"CONFIG_TARGET_mediatek_filogic=y\" >> ./.config; echo \"CONFIG_TARGET_mediatek_filogic_DEVICE_asus_rt-ax59u=y\" >> ./.config; echo \"CONFIG_TARGET_ARCH_PACKAGES=\\\"aarch64_cortex-a53\\\"\" >> ./.config; echo \"CONFIG_PACKAGE_fitblk=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-crypto-hw-safexcel=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-usb3=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-mt7915e=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-mt7986-firmware=y\" >> ./.config; echo \"CONFIG_PACKAGE_mt7986-wo-firmware=y\" >> ./.config; echo \"CONFIG_PACKAGE_wifischedule=y\" >> ./.config; echo \"CONFIG_PACKAGE_luci-app-wifischedule=y\" >> ./.config; echo \"CONFIG_PACKAGE_luci-i18n-wifischedule-ru=y\" >> ./.config; echo \"CONFIG_PACKAGE_facinstall=y\" >> ./.config"
              },
              {
                "target": "brume2",
                "name": "GL.iNet Brume 2 (MT2500)",
                "kernel_path": "mediatek/filogic",
                "release_tag": "iWRT_Brume2",
                "device_config": "sed -i \"/fdisk/d\" ./.config; sed -i \"/partx-utils/d\" ./.config; sed -i \"/fitblk/d\" ./.config; sed -i \"/kmod-crypto-hw-safexcel/d\" ./.config; echo \"CONFIG_TARGET_mediatek=y\" >> ./.config; echo \"CONFIG_TARGET_mediatek_filogic=y\" >> ./.config; echo \"CONFIG_TARGET_mediatek_filogic_DEVICE_glinet_gl-mt2500=y\" >> ./.config; echo \"CONFIG_TARGET_ARCH_PACKAGES=\\\"aarch64_cortex-a53\\\"\" >> ./.config; echo \"CONFIG_PACKAGE_fitblk=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-crypto-hw-safexcel=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-usb3=y\" >> ./.config; echo \"CONFIG_PACKAGE_eip197-mini-firmware=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-mt7981-firmware=y\" >> ./.config; echo \"CONFIG_PACKAGE_mt7981-wo-firmware=y\" >> ./.config; echo \"CONFIG_PACKAGE_kmod-mt76=m\" >> ./.config"
              }
            ]
          }
          '
          
          # Filter the matrix based on the input
          if [ "${{ github.event.inputs.target }}" == "all" ]; then
            # Output the full matrix, compacted to a single line
            echo "matrix=$(echo "$MATRIX_JSON" | jq -c .)" >> $GITHUB_OUTPUT
          else
            # Use jq to filter for the selected target, then compact to a single line
            FILTERED_MATRIX=$(echo "$MATRIX_JSON" | jq -c --arg TARGET "${{ github.event.inputs.target }}" '{include: [.include[] | select(.target == $TARGET)]}')
            echo "matrix=$FILTERED_MATRIX" >> $GITHUB_OUTPUT
          fi
  build:
    needs: setup
    # Continue only if the setup job produced a non-empty matrix
    if: ${{ needs.setup.outputs.matrix != '' && fromJson(needs.setup.outputs.matrix).include[0] != null }}
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      actions: write

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}

    name: Build for ${{ matrix.name }}

    steps:
    - name: Free up disk space
      run: |
        echo ">>> Освобождение диска"
        df -h
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache /opt/az /opt/microsoft "$AGENT_TOOLSDIRECTORY"
        sudo apt-get purge -y "azure*" "dotnet*" "ghc*" "llvm*" "mono*" "android*"
        sudo apt-get autoremove -y
        sudo apt-get clean
        df -h
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://raw.githubusercontent.com/Gzxhwq/OpenWrt-Actions/main/depends-ubuntu-2204) build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-setuptools rsync swig unzip zlib1g-dev file wget llvm python3-pyelftools libpython3-dev aria2 jq qemu-utils ccache rename libelf-dev device-tree-compiler libgmp3-dev libmpc-dev libfuse-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
    - name: Cloning source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --branch $REPO_BRANCH $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
    - name: Get Latest Kernel Hash
      id: get_hash
      run: |
        KERNEL_LIST=$(curl -s https://immortalwrt.kyarucloud.moe/snapshots/targets/${{ matrix.kernel_path }}/kmods/ | grep -oE '6\.[0-9]+\.[0-9]+-[0-9]+-[a-f0-9]+')
        LATEST_HASH=$(echo "$KERNEL_LIST" | while read -r line; do
            version=$(echo "$line" | cut -d'-' -f1)
            major=$(echo "$version" | cut -d'.' -f1)
            minor=$(echo "$version" | cut -d'.' -f2)
            patch=$(echo "$version" | cut -d'.' -f3)
            printf "%03d%03d%03d %s\n" "$major" "$minor" "$patch" "$line"
        done | sort -r | head -n1 | cut -d' ' -f2 | cut -d'-' -f3)
        echo "LATEST_HASH=${LATEST_HASH}" >> $GITHUB_ENV
        echo "Latest hash for ${{ matrix.target }} is: ${LATEST_HASH}"
    - name: Modify kernel-defaults.mk
      run: |
        cd openwrt
        sed -i "s/\$(MKHASH) md5/echo \"${LATEST_HASH}\"/g" include/kernel-defaults.mk
    - name: Loading custom sources (diy-part1.sh)
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
    - name: Update and install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a
    - name: Loading Custom Configurations
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        [ -e files ] && mv ./files openwrt/files
        cd openwrt
        echo "--- Injecting config for ${{ matrix.name }} ---"
        # eval will execute the command string from device_config
        eval "${{ matrix.device_config }}"
        echo "---------------------------------------------"
        chmod +x $GITHUB_WORKSPACE/$DIY_P2_SH
        $GITHUB_WORKSPACE/$DIY_P2_SH
        make defconfig
    - name: Show final config
      run: |
        echo "::group::Final .config for ${{ matrix.name }}"
        cat openwrt/.config
        echo "::endgroup::"
    - name: Fix permissions for custom uci-defaults files
      run: |
        cd openwrt
        if [ -d "files/etc/uci-defaults" ]; then
          echo ">>> Fixing permissions for custom uci-defaults zz* files"
          find files/etc/uci-defaults/ -name "zz*" -type f -exec chmod +x {} \;
        fi
    - name: Download Software Packages
      id: package
      run: |
        cd openwrt
        make download -j$(nproc)
        find dl -size -1024c -exec rm -f {} \;
    - name: Compile Firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) Thread compilation"
        make -j$(expr $(nproc) + 1) || make -j1 V=s
        echo "compile_status=success" >> $GITHUB_ENV
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "compile=success" >> $GITHUB_OUTPUT
        if [ -s DEVICE_NAME ]; then
          echo "device-name=$(cat DEVICE_NAME)" >> $GITHUB_OUTPUT
        fi
        echo "file-date=$(date +"%Y%m%d%H%M")" >> $GITHUB_OUTPUT
    - name: Inspection of space utilization
      if: (!cancelled())
      run: df -hT

    - name: Cleanup build artifacts
      if: success()
      run: |
        echo ">>> Очистка build_dir и staging_dir"
        rm -rf openwrt/build_dir openwrt/staging_dir openwrt/tmp
        df -h
    - name: Uploading the bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.compile == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: ${{ matrix.target }}_iWRT_bin${{ steps.compile.outputs.device-name }}_${{ steps.compile.outputs.file-date }}
        path: openwrt/bin

    # ... Остальные шаги (upload firmware, release, etc.) без изменений ...
    - name: Organize documents
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "organize=success" >> $GITHUB_OUTPUT
    - name: Uploading the firmware catalog
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.organize == 'success' && !cancelled()
      with:
        name: ${{ matrix.target }}_iWRT_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate Publishing Tags
      id: tag
      if: steps.compile.outputs.compile == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=${{ matrix.release_tag }}" >> $GITHUB_ENV
        echo "release_tag=${{ matrix.release_tag }}" >> $GITHUB_OUTPUT
        touch release.txt
        echo "tag=success" >> $GITHUB_OUTPUT
    - name: Upload Firmware to Release
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.tag == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
        prerelease: true
        draft: false

    - name: Delete the workflow run
      uses: Mattraks/delete-workflow-runs@v2.0.6
      if: success() || failure()
      with:
        retain_days: 4
        keep_minimum_runs: 3

    - name: Delete old version
      uses: dev-drprasad/delete-older-releases@v0.3.4
      if: steps.tag.outputs.tag == 'success' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
